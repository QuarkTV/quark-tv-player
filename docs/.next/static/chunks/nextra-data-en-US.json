{"/":{"title":"Index","data":{"":"A modern React video player built on top of Vidstack, optimized for live streaming with a Twitch-inspired design.\nGet Started\nGitHub\nSupported Providers\nReady to Get Started?\nStart using QuarkTV Player in your project in minutes.\nInstallation Guide\nView Examples"}},"/docs/installation":{"title":"Installation","data":{"using-npm#Using npm":"npm install @quarktv/quark-tv-player","using-yarn#Using yarn":"yarn add @quarktv/quark-tv-player","using-pnpm#Using pnpm":"pnpm add @quarktv/quark-tv-player","requirements#Requirements":"QuarkTV Player requires the following peer dependencies:\nReact 18 or later\nReact DOM 18 or later","basic-setup#Basic Setup":"Install the package using your preferred package manager\nImport the component and its styles in your application\n// In your app entry point (e.g., _app.tsx or App.jsx)\r\nimport '@quarktv/quark-tv-player/dist/styles.css'\nInitialize the BunnyStream client and use the player component:\nimport { QuarkTVPlayer, BunnyStreamClient } from '@quarktv/quark-tv-player'\r\n\r\n// Initialize the client\r\nconst client = new BunnyStreamClient({\r\n  apiKey: 'your-api-key',\r\n  libraryId: 'your-library-id'\r\n})\r\n\r\n// Use the player component\r\nexport default function VideoPlayer() {\r\n  return (\r\n    <QuarkTVPlayer\r\n      videoId=\"your-video-id\"\r\n      config={client}\r\n      streamerInfo={{\r\n        name: \"VanixQC\",\r\n        title: \"Just Chatting\",\r\n        category: \"IRL\",\r\n        viewers: 1234,\r\n        avatarUrl: \"https://example.com/avatar.jpg\"\r\n      }}\r\n    />\r\n  )\r\n}","next-steps#Next Steps":"Check out the Getting Started guide for more detailed usage instructions\nSee the API Reference for all available options\nView Examples for common use cases"}},"/docs/getting-started":{"title":"Getting Started","data":{"":"This guide will help you get started with QuarkTV Player in your React application.","quick-start#Quick Start":"After installing the package, you can start using QuarkTV Player in your application.","1-initialize-the-bunnystream-client#1. Initialize the BunnyStream Client":"First, create an instance of BunnyStreamClient with your Bunny.net credentials:\nimport { BunnyStreamClient } from '@quarktv/quark-tv-player'\r\n\r\nconst client = new BunnyStreamClient({\r\n  apiKey: 'your-api-key',\r\n  libraryId: 'your-library-id'\r\n})","2-use-the-player-component#2. Use the Player Component":"Now you can use the QuarkTVPlayer component in your application:\nimport { QuarkTVPlayer } from '@quarktv/quark-tv-player'\r\n\r\nexport default function VideoPlayer() {\r\n  return (\r\n    <QuarkTVPlayer\r\n      videoId=\"your-video-id\"\r\n      config={client}\r\n      streamerInfo={{\r\n        name: \"VanixQC\",\r\n        title: \"Just Chatting\",\r\n        category: \"IRL\",\r\n        viewers: 1234,\r\n        avatarUrl: \"https://example.com/avatar.jpg\"\r\n      }}\r\n    />\r\n  )\r\n}","3-customize-the-player#3. Customize the Player":"You can customize the player's appearance using CSS variables:\nmedia-player {\r\n  --media-brand: #9147ff; /* Primary color */\r\n  --media-focus-ring: #9147ff; /* Focus ring color */\r\n  --media-background: #0e0e10; /* Player background */\r\n}","component-props#Component Props":"","required-props#Required Props":"videoId: The ID of the video from Bunny.net\nconfig: An instance of BunnyStreamClient","optional-props#Optional Props":"streamerInfo: Information about the streamer and stream\ninterface StreamerInfo {\r\n  name: string;\r\n  title?: string;\r\n  category?: string;\r\n  viewers?: number;\r\n  avatarUrl?: string;\r\n}","error-handling#Error Handling":"The player includes built-in error handling and will display appropriate messages for common issues:\n<QuarkTVPlayer\r\n  videoId=\"your-video-id\"\r\n  config={client}\r\n  onError={(error) => {\r\n    console.error('Video playback error:', error)\r\n  }}\r\n/>","next-steps#Next Steps":"Check out the API Reference for detailed documentation\nSee Examples for common use cases\nLearn about Advanced Features"}},"/docs/advanced-features":{"title":"Advanced Features","data":{"":"Discover advanced features and customization options to get the most out of QuarkTV Player.","custom-styling#Custom Styling":"","css-variables#CSS Variables":"QuarkTV Player uses CSS variables for theming. You can override these variables to match your application's design:\n:root {\r\n  --media-brand: #9147ff;\r\n  --media-focus-ring: #772ce8;\r\n  --media-background: #0e0e10;\r\n  --media-live-indicator-color: #eb0400;\r\n}","streamer-information#Streamer Information":"Customize the streamer overlay with detailed information:\nconst streamerInfo = {\r\n  name: \"VanixQC\",\r\n  title: \"Live Coding Session\",\r\n  category: \"Programming\",\r\n  viewers: 1234,\r\n  avatarUrl: \"https://example.com/avatar.png\"\r\n};\r\n\r\n<QuarkTVPlayer\r\n  videoId=\"your-video-id\"\r\n  client={client}\r\n  streamerInfo={streamerInfo}\r\n/>","event-handling#Event Handling":"Listen to player events for custom behaviors:\n<QuarkTVPlayer\r\n  onPlay={() => console.log('Video started playing')}\r\n  onPause={() => console.log('Video paused')}\r\n  onError={(error) => console.error('Playback error:', error)}\r\n/>","quality-control#Quality Control":"The player automatically manages video quality, but you can customize the available options:\nconst config = {\r\n  qualities: [1080, 720, 480, 360],\r\n  defaultQuality: 720\r\n};\r\n\r\n<QuarkTVPlayer\r\n  videoId=\"your-video-id\"\r\n  client={client}\r\n  config={config}\r\n/>","error-handling#Error Handling":"Implement custom error handling with React Error Boundary:\nimport { ErrorBoundary } from 'react-error-boundary';\r\n\r\nfunction ErrorFallback({ error }) {\r\n  return (\r\n    <div role=\"alert\">\r\n      <p>Something went wrong:</p>\r\n      <pre>{error.message}</pre>\r\n    </div>\r\n  );\r\n}\r\n\r\n<ErrorBoundary FallbackComponent={ErrorFallback}>\r\n  <QuarkTVPlayer {...props} />\r\n</ErrorBoundary>","performance-optimization#Performance Optimization":"","lazy-loading#Lazy Loading":"Use dynamic imports for better performance:\nimport dynamic from 'next/dynamic';\r\n\r\nconst QuarkTVPlayer = dynamic(\r\n  () => import('@quarktv/quark-tv-player'),\r\n  { ssr: false }\r\n);","preload-hints#Preload Hints":"Add preload hints for faster loading:\n<link \r\n  rel=\"preload\" \r\n  href=\"your-video-url/playlist.m3u8\" \r\n  as=\"fetch\" \r\n  crossorigin=\"anonymous\"\r\n/>","mobile-optimization#Mobile Optimization":"The player is responsive by default, but you can further optimize for mobile:\n@media (max-width: 640px) {\r\n  .quark-player {\r\n    --media-controls-height: 48px;\r\n    --media-live-button-size: 24px;\r\n  }\r\n}"}},"/docs/api":{"title":"API Reference","data":{"bunnystreamclient#BunnyStreamClient":"","configuration#Configuration":"interface BunnyStreamConfig {\r\n  apiKey: string;\r\n  libraryId: string;\r\n  baseUrl?: string;\r\n  cdnHostname?: string;\r\n  tokenAuthKey?: string;\r\n}\napiKey: Your Bunny Stream API key\nlibraryId: Your video library ID\nbaseUrl: Optional. The Bunny Stream API base URL (default: 'https://video.bunnycdn.com')\ncdnHostname: Optional. Your CDN hostname (default: vz-{libraryId}.b-cdn.net)\ntokenAuthKey: Optional. Token authentication key (default: same as apiKey)","methods#Methods":"","getvideovideoid-string-promisevideometadata#getVideo(videoId: string): Promise<VideoMetadata>":"Fetches video metadata from Bunny.net.\ninterface VideoMetadata {\r\n  videoLibraryId: string;\r\n  guid: string;\r\n  title?: string;\r\n  dateUploaded?: string;\r\n  views?: number;\r\n  isPublic?: boolean;\r\n  length?: number;\r\n  status?: number;\r\n  thumbnailUrl?: string;\r\n  resolutions?: string[];\r\n  encodeProgress?: number;\r\n  storageSize?: number;\r\n  captions?: Array<{\r\n    srclang: string;\r\n    label: string;\r\n    url: string;\r\n  }>;\r\n}","gethlsstreamurlvideoid-string-promisestring#getHLSStreamUrl(videoId: string): Promise<string>":"Gets the HLS stream URL for a video.","getthumbnailurlvideoid-string-time-number-string#getThumbnailUrl(videoId: string, time?: number): string":"Gets the thumbnail URL for a video. Optionally specify a timestamp.","quarktvplayer-component#QuarkTVPlayer Component":"","props#Props":"interface QuarkTVPlayerProps {\r\n  videoId: string;\r\n  config: BunnyStreamClient;\r\n  streamerInfo?: {\r\n    name: string;\r\n    title?: string;\r\n    category?: string;\r\n    viewers?: number;\r\n    avatarUrl?: string;\r\n  };\r\n  onError?: (error: Error) => void;\r\n  onPlay?: () => void;\r\n  onPause?: () => void;\r\n  onEnded?: () => void;\r\n  onTimeUpdate?: (time: number) => void;\r\n  onQualityChange?: (quality: string) => void;\r\n}","css-customization#CSS Customization":"The player can be customized using CSS variables:\nmedia-player {\r\n  /* Colors */\r\n  --media-brand: #9147ff;\r\n  --media-focus-ring: #9147ff;\r\n  --media-background: #0e0e10;\r\n\r\n  /* Controls */\r\n  --media-control-background: rgba(0, 0, 0, 0.7);\r\n  --media-control-hover-background: rgba(0, 0, 0, 0.85);\r\n}","events#Events":"The player emits various events that you can listen to:\n<QuarkTVPlayer\r\n  videoId=\"your-video-id\"\r\n  config={client}\r\n  onPlay={() => console.log('Video started playing')}\r\n  onPause={() => console.log('Video paused')}\r\n  onEnded={() => console.log('Video ended')}\r\n  onTimeUpdate={(time) => console.log('Current time:', time)}\r\n  onQualityChange={(quality) => console.log('Quality changed to:', quality)}\r\n  onError={(error) => console.error('Error:', error)}\r\n/>"}}}